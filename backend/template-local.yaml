AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: MetaWebhookHandler Lambda + single API Gateway with CORS and stage control

Parameters:
  StageName:
    Type: String
    Default: prod
    AllowedValues: [preprod, prod]
    Description: API Gateway stage name to deploy (preprod or prod)
  VerifyToken:
    Type: String
    Default: my_super_secret_token_123
    Description: Token to verify GET requests from Meta

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    MemorySize: 128

Resources:
  MyUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "ReceiptCheckerUserPool-${AWS::StackName}"
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireNumbers: true
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  MyUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ReceiptCheckerFrontendClient
      UserPoolId: !Ref MyUserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3001/api/auth/callback/cognito
        - https://receipt-api.ukbennettinnovations.com/api/auth/callback/cognito
      LogoutURLs:
        - http://localhost:3001/
        - https://receipt-api.ukbennettinnovations.com/
      SupportedIdentityProviders:
        - COGNITO
  MyUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "receiptchecker-auth-${AWS::Region}"
      UserPoolId: !Ref MyUserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  MetaWebhookApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MetaWebhookApi
      StageName: !Ref StageName
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'OPTIONS,GET,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
      Auth:
        DefaultAuthorizer: None
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt MyUserPool.Arn
            Identity:
              Header: Authorization
              ValidationExpression: '^Bearer [-0-9a-zA-Z\._]*$'

  GetReceiptsHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: getReceiptsHandler.handler
      Runtime: nodejs18.x
      Timeout: 10
      Environment:
        Variables:
          RECEIPTS_TABLE_NAME: !Ref ReceiptsTable
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !GetAtt ReceiptsTable.Arn
      Events:
        ReceiptsApi:
          Type: Api
          Properties:
            Path: /receipts
            Method: GET
            RestApiId: !Ref MetaWebhookApi
            Auth:
              Authorizer: None

  MetaWebhookGetHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: metaWebhookGetHandler.handler
      Events:
        GetWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref MetaWebhookApi
            Path: /meta_webhook
            Method: GET
      Environment:
        Variables:
          VERIFY_TOKEN: !Ref VerifyToken

  MetaWebhookPostHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: metaWebhookPostHandler.handler
      Layers:
        - !Ref ErrorHandlerLayer
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ImageProcessingQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt TextProcessingQueue.QueueName
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:MetaSecrets*
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: !GetAtt UsersTable.Arn
      Environment:
        Variables:
          IMAGE_PROCESSING_QUEUE_URL: !Ref ImageProcessingQueue
          TEXT_PROCESSING_QUEUE_URL: !Ref TextProcessingQueue
          META_SECRET_ID: !Ref MetaSecrets
      Events:
        PostWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref MetaWebhookApi
            Path: /meta_webhook
            Method: POST
  
  ProcessReceiptWorker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: imageProcessingWorker.handler
      Layers:
        - !Ref ErrorHandlerLayer
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          META_SECRET_ID: !Ref MetaSecrets
          AZURE_SECRET_ID: !Ref AzureSecrets
          HEARTBEAT_QUEUE_URL: !Ref HeartbeatQueue
          BRAVE_SECRET_ID: !Ref BraveSecrets
          OPENAI_SECRET_ID: !Ref OpenAISecrets
          EXCHANGE_RATE_SECRET_ID: !Ref ExchangeRateSecrets
      Policies:
        - AWSLambdaBasicExecutionRole
        - SQSSendMessagePolicy:
            QueueName: !GetAtt HeartbeatQueue.QueueName
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:MetaSecrets*
                - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:AzureSecrets*
                - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:BraveSecrets*
                - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:OpenAISecrets*
                - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ExchangeRateSecrets*
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt ReceiptsTable.Arn
                - !GetAtt MessagesTable.Arn
                - !GetAtt ImagesTable.Arn
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource:
                - !GetAtt CategoryTable.Arn
                - !GetAtt ImagesTable.Arn
                - !GetAtt UsersTable.Arn
      Events:
        ReceiptQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ImageProcessingQueue.Arn
            BatchSize: 10
      Tags:
        App: ReceiptChecker

  
  ErrorHandlerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: error-handler
      Description: "Layer for centralized error handling and WhatsApp notifications"
      ContentUri: layers/errorHandler
      CompatibleRuntimes:
        - nodejs18.x

  TextProcessingWorker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: textProcessingWorker.handler
      Layers:
        - !Ref ErrorHandlerLayer
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:OpenAISecrets*
                - Fn::Sub: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:MetaSecrets*
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt ReceiptsTable.Arn
                - !GetAtt UsersTable.Arn
                - !GetAtt ConversationHistoryTable.Arn
      Environment:
        Variables:
          OPENAI_SECRET_ID: !Ref OpenAISecrets
          META_SECRET_ID: !Ref MetaSecrets
      Timeout: 900
      Events:
        TextQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TextProcessingQueue.Arn
            BatchSize: 10

  HeartbeatLogger:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: heartbeatLogger.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
      Events:
        HeartbeatQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt HeartbeatQueue.Arn
            BatchSize: 10
      Tags:
        App: ReceiptChecker

  ImageProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ImageProcessingQueue
      VisibilityTimeout: 60
      MessageRetentionPeriod: 345600
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  
  TextProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TextProcessingQueue
      VisibilityTimeout: 900
      MessageRetentionPeriod: 345600
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # SQS queue for heartbeat delays to keep users engaged
  HeartbeatQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: HeartbeatQueue
      VisibilityTimeout: 60
      MessageRetentionPeriod: 345600
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # DynamoDB tables for receipt processing
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MessagesTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  ReceiptsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ReceiptsTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UsersTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # DynamoDB table for conversation history
  ConversationHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ConversationHistoryTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # DynamoDB table for mapping company/shop names to spending categories
  CategoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: CategoryTable
      AttributeDefinitions:
        - AttributeName: companyName
          AttributeType: S
        - AttributeName: category
          AttributeType: S
      KeySchema:
        - AttributeName: companyName
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: CategoryIndex
          KeySchema:
            - AttributeName: category
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # DynamoDB table for tracking seen image hashes (deduplication lookup)
  ImagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ImagesTable
      AttributeDefinitions:
        - AttributeName: imageHash
          AttributeType: S
      KeySchema:
        - AttributeName: imageHash
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # Secrets Manager secret for WhatsApp Cloud API access token
  MetaSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: MetaSecrets
      Description: "Stores the WhatsApp Cloud API system user access token"
      SecretString: '{"access_token":"YOUR_WA_TOKEN"}'
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  # Secrets Manager secret for Azure OCR configuration
  AzureSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: AzureSecrets
      Description: "Stores the Azure OCR and Vision endpoints and subscription key"
      SecretString: '{"ocr_endpoint":"https://xxx.cognitiveservices.azure.com","ocr_key":"abc123secret","vision_endpoint":"https://xxx.cognitiveservices.vision.azure.com"}'
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  # Secrets Manager secret for OpenAI API key
  OpenAISecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: OpenAISecrets
      Description: "Stores the API key for OpenAI Chat Completions"
      SecretString: '{"openai_api_key":"YOUR_OPENAI_API_KEY"}'
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  # Secrets Manager secret for Search API key
  BraveSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: BraveSecrets
      Description: "Stores the API key for Brave"
      SecretString: '{"brave_api_key":"YOUR_BRAVE_API_KEY"}'
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
  # Secrets Manager secret for Exchange Rate API key
  ExchangeRateSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: ExchangeRateSecrets
      Description: "Stores the API key for Exchange Rate service"
      SecretString: '{"api_key":"YOUR_EXCHANGE_RATE_API_KEY"}'
      Tags:
        - Key: App
          Value: ReceiptChecker
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

Outputs:
  ApiEndpoint:
    Description: URL of the MetaWebhook API endpoint
    Value: !Sub "https://${MetaWebhookApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/meta_webhook"
  ImageProcessingQueueUrl:
    Description: URL of the ImageProcessingQueue SQS queue
    Value: !Ref ImageProcessingQueue
  TextProcessingQueueUrl:
    Description: URL of the TextProcessingQueue SQS queue
    Value: !Ref TextProcessingQueue
  HeartbeatQueueUrl:
    Description: URL of the HeartbeatQueue SQS queue
    Value: !Ref HeartbeatQueue
  MetaWebhookApiId:
    Description: ID of the MetaWebhookApi
    Value: !Ref MetaWebhookApi
  CognitoUserPoolId:
    Value: !Ref MyUserPool
  CognitoUserPoolClientId:
    Value: !Ref MyUserPoolClient
  CognitoDomain:
    Value: !Sub "https://receipts-app-web-user-pool-${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com"