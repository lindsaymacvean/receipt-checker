AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: MetaWebhookHandler Lambda + single API Gateway with CORS and stage control

Parameters:
  StageName:
    Type: String
    Default: prod
    AllowedValues: [preprod, prod]
    Description: API Gateway stage name to deploy (preprod or prod)
  CustomDomainName:
    Type: String
    Default: receipt-api.ukbennettinnovations.com
    Description: Custom domain for the API
  CertificateArn:
    Type: String
    Description: ACM certificate ARN for the custom domain
  VerifyToken:
    Type: String
    Default: my_super_secret_token_123
    Description: Token to verify GET requests from Meta
  CreateCustomDomain:
    Type: String
    AllowedValues: ["true", "false"]
    Default: "true"
    Description: Whether to create the custom domain in API Gateway

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    MemorySize: 128

Conditions:
  CreateCustomDomain: !Equals [!Ref CreateCustomDomain, "true"]
  # DomainName and BasePathMapping resources will only be created if this is true

Resources:
  MetaWebhookApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MetaWebhookApi
      StageName: !Ref StageName
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'OPTIONS,GET,POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"

  # Conditional custom domain resources
  CustomDomainNameResource:
    Condition: CreateCustomDomain
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref CustomDomainName
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  CustomBasePathMapping:
    Condition: CreateCustomDomain
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref CustomDomainName
      RestApiId: !Ref MetaWebhookApi
      Stage: prod
      BasePath: ''

  MetaWebhookGetHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: metaWebhookGetHandler.handler
      Events:
        GetWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref MetaWebhookApi
            Path: /meta_webhook
            Method: GET
      Environment:
        Variables:
          VERIFY_TOKEN: !Ref VerifyToken

  MetaWebhookPostHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: metaWebhookPostHandler.handler
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ReceiptProcessingQueue.QueueName
      Environment:
        Variables:
          RECEIPT_PROCESSING_QUEUE_URL: !Ref ReceiptProcessingQueue
      Events:
        PostWebhook:
          Type: Api
          Properties:
            RestApiId: !Ref MetaWebhookApi
            Path: /meta_webhook
            Method: POST
  
  ProcessReceiptWorker:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambdas/
      Handler: processReceiptWorker.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ReceiptCheckerSecrets*
      Events:
        ReceiptQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ReceiptProcessingQueue.Arn
            BatchSize: 10
      Tags:
        App: ReceiptChecker

  ReceiptProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ReceiptProcessingQueue
      VisibilityTimeout: 60
      Tags:
        - Key: App
          Value: ReceiptChecker

  # DynamoDB tables for receipt processing
  MessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MessagesTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: App
          Value: ReceiptChecker

  ReceiptsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ReceiptsTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: App
          Value: ReceiptChecker

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UsersTable
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: App
          Value: ReceiptChecker

  # Secrets Manager secret for WhatsApp system user token
  ReceiptCheckerSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: ReceiptCheckerSecrets
      Description: "Stores the system user token used to authenticate calls to the WhatsApp Cloud API"
      SecretString: '{
          "access_token": "YOUR_WA_TOKEN",
          "ocr_endpoint": "https://xxx.cognitiveservices.azure.com",
          "ocr_key": "abc123secret"
        }'
      Tags:
        - Key: App
          Value: ReceiptChecker

Outputs:
  ApiEndpoint:
    Description: URL of the MetaWebhook API endpoint
    Value: !Sub "https://${MetaWebhookApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/meta_webhook"
  CustomDomainName:
    Description: "Custom domain for the API"
    Value: !Ref CustomDomainName

  ReceiptProcessingQueueUrl:
    Description: URL of the ReceiptProcessingQueue SQS queue
    Value: !Ref ReceiptProcessingQueue